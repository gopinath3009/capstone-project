pipeline {
    agent any

    environment {
        RESTAPI = 't1-project'
        DOCKERFILE_BRANCH = 'main'
        DOCKER_HUB_REGISTRY = 'docker.io'
        IMAGE_TAG = 'vigridtest'
        SONAR_SERVER_URL = 'http://54.241.147.5:9000'
        SONAR_LOGIN = 'squ_43ab795516f57fbd4eef59b939230703894f2081'
        KUBECONFIG_PATH = '/home/ubuntu/.kube/config'  // Update this path
    }

    tools {
        maven 'Maven-3.8.4'
        jdk 'jdk-path'
    }

    stages {
        stage('SCM') {
            steps {
                dir("${WORKSPACE}/${RESTAPI}") {
                    git branch: 'master', url: 'https://github.com/gopinath3009/capstone-project.git'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Build
                    dir("${WORKSPACE}/${RESTAPI}") {
                        sh 'mvn clean package'
                    }
                    // Build the Docker image
                    dir("${WORKSPACE}/${RESTAPI}") {
                        withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                            sh "sudo docker build -t ${DOCKER_HUB_REGISTRY}/${env.dockerHubUser}/${RESTAPI}:${IMAGE_TAG} ."
                        }
                    }
                }
            }
        }

        stage('Pushing to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                        sh " sudo docker login -u ${env.dockerHubUser} -p ${dockerHubPassword}"
                        sh "sudo docker push ${DOCKER_HUB_REGISTRY}/${env.dockerHubUser}/${RESTAPI}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Code Analysis') {
            environment {
                scannerHome = tool 'sonarqube'
            }
            steps {
                script {
                    dir("${WORKSPACE}/${RESTAPI}") {
                        withSonarQubeEnv('sonarqube') {
                            sh "${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=T1 \
                                -Dsonar.projectName=T1 \
                                -Dsonar.sources=. \
                                -Dsonar.java.binaries=target/classes"
                        }
                    }
                }
            }
        }

       

        stage('Deploy to EKS') {
            steps {
                script {
                    // Assuming Jenkins already has access to the EKS cluster
                    dir("${WORKSPACE}/${RESTAPI}") {
                        sh " sudo kubectl apply -f deployment-service.yml"
                    }
                }
            }
        }
    }
}
